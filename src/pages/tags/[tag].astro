---
import BlogPost from '@components/BlogPost.astro';
import BaseLayout from '@layouts/BaseLayout.astro';
import type { MarkdownInstance } from 'astro';

type StaticPathResult = () => Promise<{ params: Params; props: Props }[]>;

export const getStaticPaths: StaticPathResult = async () => {
  const allPosts = await Astro.glob('../posts/*.md');
  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
  ];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) =>
      post.frontmatter.tags.includes(tag)
    );
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
};

interface Props {
  posts: MarkdownInstance<Record<string, any>>[];
}
interface Params {
  tag: string;
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout pageTitle={tag}>
  <p>{tag}のタグが付いた記事</p>
  <ul>
    {
      posts.map((post) => (
        <BlogPost url={post.url} title={post.frontmatter.title} />
      ))
    }
  </ul>
</BaseLayout>
